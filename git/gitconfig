# Sample gitconfig
#

[hub]
        protocol = https
[user]
        name = John Hu
        email = huziyong@gmail.com
[credential]
        helper = osxkeychain
[alias]
        # add
        a = add                           # add
        chunkyadd = add --patch           # stage commits       chunk by chunk
      
        # via http://blog.apiaxle.com/post/handy-git-tips-to-      stop-you-getting-fired/
        snapshot = !git stash save "snapshot: $(date)" && git       stash apply "stash@{0}"
        snapshots = !git stash list --grep snapshot
      
        #via http://stackoverflow.com/questions/5188320/how-can      -i-get-a-list-of-git-branches-ordered-by-most-recent-      commit
        recent-branches = !git for-each-ref --count=5 --sort=-      committerdate refs/heads/ --format='%(refname:short)'
      
        # branch
        b = branch -v                     # branch (verbose)
      
        # commit
        c = commit -m                     # commit with message
        ca = commit -am                   # commit all with       message
        ci = commit                       # commit
        amend = commit --amend            # ammend your last       commit
        ammend = commit --amend           # ammend your last       commit
      
        # checkout
        co = checkout                     # checkout
        nb = checkout -b                  # create and switch       to a new branch (mnemonic: "git new branch       branchname...")
      
        # cherry-pick
        cp = cherry-pick -x               # grab a change from       a branch
      
        # diff
        d = diff                          # diff unstaged       changes
        dc = diff --cached                # diff staged changes
        last = diff HEAD^                 # diff last       committed change
      
        # log
        l = log --graph --date=short
        changes = log --pretty=format:\"%h %cr %cn       %Cgreen%s%Creset\" --name-status
        short = log --pretty=format:\"%h %cr %cn       %Cgreen%s%Creset\"
        changelog = log --pretty=format:\" * %s\"
        shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
      
        # pull
        pl = pull                         # pull
      
        # push
        ps = push                         # push
      
        # rebase
        rc = rebase --continue            # continue rebase
        rs = rebase --skip                # skip rebase
      
        # remote
        r = remote -v                     # show remotes (      verbose)
      
        # reset
        unstage = reset HEAD              # remove files from       index (tracking)
        uncommit = reset --soft HEAD^     # go back before       last commit, with files in uncommitted state
        filelog = log -u                  # show changes to a       file
        mt = mergetool                    # fire up the merge       tool
      
        # stash
        ss = stash                        # stash changes
        sl = stash list                   # list stashes
        sa = stash apply                  # apply stash (      restore changes)
        sd = stash drop                   # drop stashes (      destory changes)
      
        # status
        s = status                        # status
        st = status                       # status
        stat = status                     # status
      
        # tag
        t = tag -n                        # show tags with <n>       lines of each tag message
      
        # svn helpers
        svnr = svn rebase
        svnd = svn dcommit
        svnl = svn log --oneline --show-commit
[color]
        diff = auto
        status = auto
        branch = auto
        ui = true
[color "branch"]
        current = yellow reverse
        local = yellow
        remote = green
[color "diff"]
        meta = yellow bold
        frag = magenta bold
        old = red
        new = green
[core]
        excludesfile = ~/.gitignore
        editor = vim
[apply]
        whitespace = nowarn
[format]
        pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
        keepBackup = false
[difftool]
        prompt = false
[help]
        autocorrect = 1
[push]
        # See `git help config` (search for push.default)
        # for more information on different options of the below setting.
        #
        # Setting to git 2.0 default to surpress warning message
        default = simple
        
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
